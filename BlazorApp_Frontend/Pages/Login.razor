@page "/Login"
@using Models
@inject NavigationManager Navigation

<h3 class="text-center">Login</h3>

<EditForm Model="@loginRequest" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="login-container">
        <div class="login-box">
            <h2>Login to Your Account</h2>

            <div class="input-group">
                <label for="username">Username:</label>
                <InputText class="input-field" id="username" @bind-Value="loginRequest.Username" placeholder="Enter Username" />
            </div>

            <div class="input-group">
                <label for="password">Password:</label>
                <InputText class="input-field" id="password" type="password" @bind-Value="loginRequest.Password" />
            </div>

            <div class="btn-container">
                <button class="btn" type="submit">Login</button>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="validation-summary">@errorMessage</div>
            }
        </div>
    </div>

</EditForm>

<link href="css/Login.css" rel="stylesheet" />

@code {
    private LoginRequest loginRequest = new LoginRequest();
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var isAuthenticated = await AuthenticateUserAsync(loginRequest);

            if (isAuthenticated)
            {
                Navigation.NavigateTo("/UserManagement");
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            Console.WriteLine(ex.Message);
        }
    }

    private async Task<bool> AuthenticateUserAsync(LoginRequest loginRequest)
    {
        await Task.Delay(500);
        return loginRequest.Username == "admin" && loginRequest.Password == "password";
    }
}
