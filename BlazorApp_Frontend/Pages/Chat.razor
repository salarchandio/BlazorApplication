@page "/Chat"
@inject NavigationManager NavigationManager
@inject BlazorApp_Frontend.Services.SignalRService SignalRService
@* @rendermode InteractiveWebAssembly *@
@layout MainLayout

<h3>Demo Chat</h3>

<div>
	<input @bind="UserInput" placeholder="Enter your name" />
	<input @bind="MessageInput" placeholder="Enter a message" />
	<button class="btn btn-primary" @onclick="SendMessage" disabled="@(!SignalRService.IsConnected)">Send</button>
</div>
<ul>
	@foreach (var message in MessageList)
	{
		<li>@message</li>
	}
</ul>

<!-- #region Woring Code -->
@* @if(IsConnected()){

	<div class="row">
		<div class="col-lg-4">
			<label>User Name</label>
			<input class="form-control" type="text" @bind="Userinput" />
		</div>
		<div class="col-lg-4">
			<label>Chat Message</label>
			<input class="form-control" type="text" @bind="MessageInput" />
		</div>
		<div class="col-lg-12 mt-1">
			<button class="btn btn-primary" @onclick="Send">Send</button>
		</div>
	</div>
	<div class="row">
		<div class="col-lg-6 mt-2 text-center">
			<ul id="Chatmessages">
				@foreach (var item in MessageList)
				{
					<li>@item</li>
				}
			</ul>
		</div>
	</div>
}
else{
	<span>Connection is connecting ....</span>
} *@

<!-- #endregion -->


@code {

	private List<string> MessageList = new();
    private string? UserInput;
    private string? MessageInput;

	protected override async Task OnInitializedAsync()
	{
		SignalRService.OnMessageReceived -= HandleMessageReceived; // Unsubscribe previous handler
		SignalRService.OnMessageReceived += HandleMessageReceived; // Subscribe current handler

		await SignalRService.InitializeAsync("https://localhost:7221/chathub");
	}

	private void HandleMessageReceived(string user, string message)
	{
		var encodedMessage = $"{user}: {message}";
		MessageList.Add(encodedMessage);
		InvokeAsync(StateHasChanged);
	}

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(UserInput) && !string.IsNullOrEmpty(MessageInput))
        {
            await SignalRService.SendMessageAsync(UserInput, MessageInput);
            MessageInput = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
		SignalRService.OnMessageReceived -= HandleMessageReceived;
		await SignalRService.DisposeAsync();
    }

	#region Working Code
	// private HubConnection hubConnection;
	// private List<string> MessageList = new List<string>();
	// private string? Userinput;
	// private string? MessageInput;

	// protected override async Task OnInitializedAsync()
	// {
	// 	hubConnection = new HubConnectionBuilder()
	// 	//.WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
	// 	.WithUrl(new Uri(NavigationManager.ToAbsoluteUri("https://localhost:7221/chathub").ToString()))
	// 	.Build();

	// 	hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
	// 	{
	// 		var encodedmessage = $"{user} : {message}";
	// 		MessageList.Add(encodedmessage);
	// 		InvokeAsync(StateHasChanged);
	// 	});

	// 	await hubConnection.StartAsync();
	// }
	// Task Send() => hubConnection.SendAsync("SendMessage",Userinput,MessageInput);

	// public bool IsConnected() => hubConnection.State == HubConnectionState.Connected;
	#endregion

}
